// Code generated by timoni. DO NOT EDIT.

//timoni:generate timoni vendor crd -f crds.yaml

package v1alpha3

import (
	"strings"
	"list"
)

// BackendTLSPolicy provides a way to configure how a Gateway
// connects to a Backend via TLS.
#BackendTLSPolicy: {
	// APIVersion defines the versioned schema of this representation
	// of an object.
	// Servers should convert recognized schemas to the latest
	// internal value, and
	// may reject unrecognized values.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	apiVersion: "gateway.networking.k8s.io/v1alpha3"

	// Kind is a string value representing the REST resource this
	// object represents.
	// Servers may infer this from the endpoint the client submits
	// requests to.
	// Cannot be updated.
	// In CamelCase.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	kind: "BackendTLSPolicy"
	metadata!: {
		name!: strings.MaxRunes(253) & strings.MinRunes(1) & {
			string
		}
		namespace!: strings.MaxRunes(63) & strings.MinRunes(1) & {
			string
		}
		labels?: {
			[string]: string
		}
		annotations?: {
			[string]: string
		}
	}

	// Spec defines the desired state of BackendTLSPolicy.
	spec!: #BackendTLSPolicySpec
}

// Spec defines the desired state of BackendTLSPolicy.
#BackendTLSPolicySpec: {
	// TargetRefs identifies an API object to apply the policy to.
	// Only Services have Extended support. Implementations MAY
	// support
	// additional objects, with Implementation Specific support.
	// Note that this config applies to the entire referenced resource
	// by default, but this default may change in the future to
	// provide
	// a more granular application of the policy.
	//
	//
	// Support: Extended for Kubernetes Service
	//
	//
	// Support: Implementation-specific for any other resource
	targetRefs: list.MaxItems(16) & [...{
		// Group is the group of the target resource.
		group: strings.MaxRunes(253) & {
			=~"^$|^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$"
		}

		// Kind is kind of the target resource.
		kind: strings.MaxRunes(63) & strings.MinRunes(1) & {
			=~"^[a-zA-Z]([-a-zA-Z0-9]*[a-zA-Z0-9])?$"
		}

		// Name is the name of the target resource.
		name: strings.MaxRunes(253) & strings.MinRunes(1)

		// SectionName is the name of a section within the target
		// resource. When
		// unspecified, this targetRef targets the entire resource. In the
		// following
		// resources, SectionName is interpreted as the following:
		//
		//
		// * Gateway: Listener name
		// * HTTPRoute: HTTPRouteRule name
		// * Service: Port name
		//
		//
		// If a SectionName is specified, but does not exist on the
		// targeted object,
		// the Policy must fail to attach, and the policy implementation
		// should record
		// a `ResolvedRefs` or similar Condition in the Policy's status.
		sectionName?: strings.MaxRunes(253) & strings.MinRunes(1) & {
			=~"^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$"
		}
	}] & [_, ...]

	// Validation contains backend TLS validation configuration.
	validation: {
		// CACertificateRefs contains one or more references to Kubernetes
		// objects that
		// contain a PEM-encoded TLS CA certificate bundle, which is used
		// to
		// validate a TLS handshake between the Gateway and backend Pod.
		//
		//
		// If CACertificateRefs is empty or unspecified, then
		// WellKnownCACertificates must be
		// specified. Only one of CACertificateRefs or
		// WellKnownCACertificates may be specified,
		// not both. If CACertifcateRefs is empty or unspecified, the
		// configuration for
		// WellKnownCACertificates MUST be honored instead if supported by
		// the implementation.
		//
		//
		// References to a resource in a different namespace are invalid
		// for the
		// moment, although we will revisit this in the future.
		//
		//
		// A single CACertificateRef to a Kubernetes ConfigMap kind has
		// "Core" support.
		// Implementations MAY choose to support attaching multiple
		// certificates to
		// a backend, but this behavior is implementation-specific.
		//
		//
		// Support: Core - An optional single reference to a Kubernetes
		// ConfigMap,
		// with the CA certificate in a key named `ca.crt`.
		//
		//
		// Support: Implementation-specific (More than one reference, or
		// other kinds
		// of resources).
		caCertificateRefs?: list.MaxItems(8) & [...{
			// Group is the group of the referent. For example,
			// "gateway.networking.k8s.io".
			// When unspecified or empty string, core API group is inferred.
			group: strings.MaxRunes(253) & {
				=~"^$|^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$"
			}

			// Kind is kind of the referent. For example "HTTPRoute" or
			// "Service".
			kind: strings.MaxRunes(63) & strings.MinRunes(1) & {
				=~"^[a-zA-Z]([-a-zA-Z0-9]*[a-zA-Z0-9])?$"
			}

			// Name is the name of the referent.
			name: strings.MaxRunes(253) & strings.MinRunes(1)
		}]

		// Hostname is used for two purposes in the connection between
		// Gateways and
		// backends:
		//
		//
		// 1. Hostname MUST be used as the SNI to connect to the backend
		// (RFC 6066).
		// 2. Hostname MUST be used for authentication and MUST match the
		// certificate
		// served by the matching backend.
		//
		//
		// Support: Core
		hostname: strings.MaxRunes(253) & strings.MinRunes(1) & {
			=~"^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$"
		}

		// WellKnownCACertificates specifies whether system CA
		// certificates may be used in
		// the TLS handshake between the gateway and backend pod.
		//
		//
		// If WellKnownCACertificates is unspecified or empty (""), then
		// CACertificateRefs
		// must be specified with at least one entry for a valid
		// configuration. Only one of
		// CACertificateRefs or WellKnownCACertificates may be specified,
		// not both. If an
		// implementation does not support the WellKnownCACertificates
		// field or the value
		// supplied is not supported, the Status Conditions on the Policy
		// MUST be
		// updated to include an Accepted: False Condition with Reason:
		// Invalid.
		//
		//
		// Support: Implementation-specific
		wellKnownCACertificates?: "System"
	}
}
